---
layout: "post"
title: "git"
date: "2016-04-16 12:40"
categories: extend
tag: [git]
---

## git入门

> 临时记录
>
> - `git add/rm` 、 `git cimmit` 时报错【fatal: Unable to create 'D:/git/demo/.git/index.lock': File exists.】，解决办法为删除本地仓库中的此文件（`rm -f ./.git/index.lock`）。
> - 运行命令`git commit --amend`、`git diff`后、打开vi编辑器出错，退出快捷键`Ctrl+Z`
> - `ls`或者`dir`都可以查看当前目录结构
> - `git status`查看当前状态
> - 删除文件git rm、git add、git commit、git push
> - 网址
>	- <http://www.jianshu.com/p/e2a15d01284c>
>	- <http://www.ruanyifeng.com/blog/2014/06/git_remote.html>
>	- <http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html>
>	- <http://blog.csdn.net/oldinaction/article/details/49704969>
>
> 第二集有几个命令


### git初步

git入门视频 <http://edu.51cto.com/course/course_id-1838.html>

### git全局配置

`git config --global user.name smalle` 设置用户名

`git config --global user.email oldinaction@qq.com` 设置邮箱

`git config --global color.ui true` 设置在命令行打印的代码带颜色

`git config --list`  列出所有配置

以上操作其实是对git的根目录下.gitconfig（`~/.gitconfig`，`~`代表根目录，`cat  ~/.gitconfig`查看此文件）进行的操作，也可直接对这个文件进行修改

> `cat 文件路径名`查看某个文件，如：**cat ~/.gitconfig**（`~`代表根目录）
> `vi 文件名`打开某个文件进行编辑
> - 点击键盘`insert`，进入vi编辑模式，开始编辑；
> - 点击`esc`退出编辑模式，进入到vi命令行模式；
> - 输入`:x`/`ZZ`将刚刚修改的文件进行保存，退出编辑页面，回到初始命令行
> `ls`查看当前目录结构，`ls -A`可以显示隐藏的目录

### 创建/克隆repository

#### 创建repository

`cd d:/git/demo/`进入到项目文件夹（可使用`mkdir 文件夹名`在当前目录创建文件夹或者手动创建）

> - 此时git bash上显示`smalle@ST-008 MINGW64 /d/git/demo`（直接在demo目录`右键-Git Bash Here`也是这个显示）
> - 如果直接点击桌面上的git图标进入命令行显示的是`smalle@ST-008 MINGW64 ~`
> - 创建之后，d:/git/demo/目录就是后面提到到 working 区（其实就是本地磁盘）

`$ git init`初始化项目，提示 Initialized empty Git repository in D:/git/demo/.git/
(上传 $ git remote add origin https://github.com/oldinaction/jekyll_demo.git  $ git push origin master)

> 此时就产生了后面提到的 staging 和 history 区

#### 克隆repository

`git clone https://github.com/UserName/ProjectName`，这是利用https方式克隆，还有其他如git、ssh等方式（克隆后git会在当前目录新建一个文件夹为 "ProjectName" 的项目）

`git clone -b <branch> <remote>` 克隆远程仓库的某个分支

### 添加、提交文件

利用`git add <file>` / `git add .`将 working 中此文件或者所有文件添加到 staging 区（**&lt;file&gt;** 为必输的文件名）

利用`git commit -m '提交时的备注'` 将 staging 区中的此文件提交到 history 区（如果不加`-m`则命令行会打开一个vi编辑器供用户填写提交时的备注）

利用`git commit -a` 将 working 中此文件直接提交到文件到history 区（此时一般加上参数`-m`，即`git commit -am '提交时的备注'`）

> git运行流程图
>
> ![git运行流程图](/data/images/2016/04/git流程图.png)

### 与远程仓库同步

`git push 远程仓库地址` 将本地仓库内容同步到远程仓库，回车后输入用户名和密码即可

`git fetch 远程仓库地址` 下载远程仓库的变动到当前分支的历史区

`git pull 远程仓库地址` 取回远程仓库的变化到当前分支的工作区。如：`git pull origin develop`

### 查看git状态和文件差别

利用`git status`查看文件状态，`git status -s`显示文件扼要信息

- Git内部只有三个状态，分别是未修改unmodified、修改modified、暂存staged。对于没有加入Git控制的文件，可以视为第四种状态未跟踪untracked
- 提示 *Untracked files* 表示没有向 git 进行登记，需要增加到 git 进行版本控制（下面文件显示红色）。使用`git add <file>` / `git add .`
- 提示 *Changes to be committed* 表示文件被修改，等待提交（下面文件显示绿色）。使用`git commit -m '提交时的备注'`
- 提示 *nothing to commit, working directory clean* 表示没有文件需要提交
- 运行`git status -s`命令，显示的标识位信息分别表示staging 和 working两个区
	- `A_`其中 A 表示 staging 中新加的文件，空格表示 working 没有变化（其中`_`表示空格）
	- `_M`其中空格表示 staging 中没有改变，M 表示 working 做了修改
	- `MM`表示 staging 和 working 都发生了变化
	- `D_`表示 staging 中此文件被删除了
	- `R_`表示 staging 中此文件进行了重命名
	- `??`表示此文件没有被 git 进行版本控制

利用`git diff`查看文件差别，`git diff --stat`是对文件差别的扼要描述

- `-红色字体`表示删除的
- `+绿色字体`表示增加的
- `git diff`默人对`git status -s`的第二个标识位（working）进行详细描述；
-  使用`git diff --staged` / `git diff --cached`则是对第一个标识位（staging）进行详细描述；
- 使用`git diff HEAD`则是对 history 区此文件的描述

### 移除文件

`git rm <file>` 将此文件从 repository 中删除

`git rm --cached <file>` 将此文件从 staging 区中删除，此时 working 区中还有

### 撤销操作

`git reset <file>` 撤销对此文件的 commit 操作，他会从 history 区中将此文件取出并还原到 staging 区

`git checkout -- <file>` 撤销对文件的 add 操作，他会从 staging 区中将此文件取出并还原到 working 区

`git checkout HEAD <file>` 撤销对文件的 add 操作，他会从 history 区中将此文件取出并还原到 working 区（其中文件名为相对.git文件夹的路径名）

### 其他

#### 查看日志和帮助

`git log`查看提交日志，`Ctrl+Z` 退出查看

`git help` 查看帮助。`[]`为可选，`<>`为必输

#### 忽略控制文件

`echo '*~' > .gitignore`将文本`*~`保存到文件 .gitignore 中，再将此文件 add 并 commit 到 git 中即可，表示进行 git 相关操作时忽略以`~`结尾的文件

#### 重命名文件

`git mv README.txt README.md` 将 README.txt 文件重命名为 README.md（markdown格式）

#### 暂存工作区

`git stash` 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中（比如有紧急Bug需要修复）

`git stash pop` 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复

`git stash list` 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复

`git stash clear` 清空Git栈

#### commit对象

commit 对象中 parent 属性指向前一个 commit，tree 属性指向一个 tree 对象（此 tree 对象可以指向文件或者文件夹）

HEAD 指向 master（只有一个分支的情况下），master 指向最新的 commit；HEAD~（或master~）表示前一个 commit；HEAD~2（或master~2）表示上上一个 commit，以此类推；HEAD~2^ 表示 HEAD~2 的父提交（此时和HEAD~3是同一个对象）

HEAD 的哈希码存放在 .git/refs/heads/master 文件中

- `git cat-file -t 某个对象的hashCode前几个字母或者对象名` 展示此对象指向的对象。如：`git cat-file -t HEAD`的结果是**commit**表示此HEAD指向一个commit 对象
- `git cat-file -p 某个对象的hashCode前几个字母或者对象名` 展示此对象的详细信息
- `git rev-parse HEAD` 获取 HEAD 对象的哈希码

#### 创建、切换、删除分支

`git branch`查看本地分支，`git branch -a`查看本地和运程所有分支（`*`代表当前所处的分支）

`git branch 分支名` 创建一个新的分支。如果此分支和 master 是同一级分支（及在处于 master 时创建的分支），那么他们指向同一个 commit 对象

`git checkout 分支名` 切换到此分支（*Switched to branch '分支名'*），此时 HEAD 指向此分支；并且本地磁盘（working 区）的内容会显示此分支的文件

`git branch -d 分支名` 删除此分支（只能删除除当前分支以外的分支；如果当前分支有一次提交，则需要将此分支合并到主分支之后再进行删除）

`git checkout -b 分支名` 创建此分支并且换到此分支（是`git branch 分支名` 和 `git checkout 分支名`的合并命令）

`git push origin <branch>` 创建远程分支

#### 合并分支

`git merge 子分支名` 将子分支名合并到主分支，合并前必须切换到主分支。（子分支的文件会替换掉主分支的文件）
